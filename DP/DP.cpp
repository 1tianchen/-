// #include <iostream>
// using namespace std;
// /*
// 	  
// 	  7
// 	 3 8
// 	8 1 0
//    2 7 4 4
//   4 5 2 6 5
// 上图给出了一个数字三角形。
// 从三角形的顶部到底部有很多条不同的路径。
// 对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。
// 路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右边的那个数。
// 此外，向左下走的次数与向右下走的次数相差不能超过 1。
// 输入格式
// 输入的第一行包含一个整数 N，表示三角形的行数。
// 下面的 N 行给出数字三角形。
// 数字三角形上的数都是 0 至 100 之间的整数。
// 输出格式
// 输出一个整数，表示答案。
// 数据范围
// 1≤N≤100
// 输入样例：
// 输出样例：
// 27
// */
// int x[10][10];
// int main()
// {
// 	ios::sync_with_stdio(false), cout.tie(0), cin.tie(0);
// 	int n; cin >> n;
// 	for(int i=1;i<=n;i++)
// 		for (int j = 1; j <=i; j++)
// 		{
// 			cin >> x[i][j];
// 		}
// 	for (int i = 2; i <= n; i++)
// 	{
// 		x[i][1]+= x[i - 1][1];
// 		x[i][i] += x[i - 1][i - 1];
// 		for (int j = 2; j <= i - 1; j++)
// 		{
// 			x[i][j] += max(x[i - 1][j], x[i - 1][j - 1]);
// 		}
// 
// 		
// 	}
// 	int ans = x[n][1];
// 	for (int i = 1; i <= n; i++)
// 	{
// 		if (x[n][i] > ans)ans = x[n][i];
// 	}
// 	cout << ans;
// 	return 0;
// }
